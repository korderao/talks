GESTION DE USUARIO 
MODULO II

Jose Luis Cordero Llanos
Developer
korderao@gmail.com
@korderao
http://itgroup.systems


* 1. INTRODUCCIÓN
- Veremos como se gestionan los usuarios locales en un equipo con Linux, sea Server o Desktop.
- Aunque en Linux hay algunas cosas diferentes, la base de la gestión de usuarios es la misma que en Windows.
- Sólo existe un usuario que tiene privilegios para dar de alta usuarios en el equipo: el usuario root.
- Los usuarios que vamos a gestionar son usuarios locales del sistema. Su gestión sólo afectará al equipo en el que estemos gestionando estos usuarios, y no afectará al resto de equipos de la red.
- Veremos las órdenes para gestionar usuarios y grupos. Y dónde y cómo el S.O. almacena esta información.

*  ARCHIVO DE USUARIOS Y CONTRASEÑAS
- Al crear una cuenta de usuario en un sistema Linux, se añade una entrada en la lista de usuarios que se almacena en el archivo de contraseñas /etc/passwd. 
- Este archivo es un archivo de texto donde cada línea contiene información de una única cuenta de usuario
 .image image/passwd.png _ 690
* ARCHIVO DE USUARIOS Y CONTRASEÑAS
  Login: 
- Nombre de la cuenta de usuario. Se utiliza para iniciar la sesión. 
  Contraseña: 
- Cada usuario tiene asociado una contraseña. La contraseña en  el archivo /etc/passwd se almacena encriptada. Aun que la contraseña está encriptada el archivo /etc/passwd puede ser leido por todos los usuarios del sistema. Por motivos de seguridad es posible almacenar las contraseñas en un archivo independiente llamado /etc/shadow que únicamente puede ser leído por el usuario root. El sistema indica en /etc/passwd que la contraseña se almacena en un archivo independiente colocando una x en el campo contraseña.
 
* ARCHIVO DE USUARIOS Y CONTRASEÑAS
  User ID: 
- Cada cuenta de usuario requiere de un id único llamado UID (User Identifier). El UID es un entero no negativo. El usuario root tiene asignado el UID cero. Los UIDs comprendidos entre 1 y 499 están reservados para propósitos administrativos y los usuarios convencionales del sistema empiezan a partir del UID 500. 
  Group ID (GID): 
- Cada usuario tiene asociado un grupo por defectocon un GID (Group Identifier). Igual que el UID, el GID es un entero no negativo. El GID de cada usuario almacenado en el archivo /etc/passwd es el identificador del grupo por defecto, aunque un usuario puede pertenecer a varios grupos.  
* ARCHIVO DE USUARIOS Y CONTRASEÑAS
  Nombre del usuario: 
- Es el nombre del usuario o comentario que define la cuenta de usuario. 
  Directorio Personal de Trabajo (Directorio Home): 
- Esta entrada especifica el directorio personal de trabajo del usuario. 
  Shell: 
- Indica que interprete de comandos usará el sistema por defecto para esta cuenta de usuario. Para las cuentas utilizadas para controlar permiso de archivos pero que nunca deberían iniciar una sesión, es posible especificar en el campo de shell /bin/false. El interprete de comandos /bin/false es un pequeño programa que no hace nada, impidiendo que se use la cuenta de usuario para iniciar una sesión en el sistema.

* ARCHIVO DE USUARIOS Y CONTRASEÑAS
  #! /bin/bash
  ram=$(free | grep 'Mem:' | awk {'print $2'})
  echo ram: $ram

* ifconfig(debian) o ip addr show (centos) (ip a s)
- Podríamos tener una serie de interfaces de red con nombres como ‘eth0’, ‘eth1’, ‘wlan0’, etc. Por lo tanto, si queremos ver la información relativa a una interfaz de red en particular:
  $ ifconfig eth0
- Activación o desactivación de una interfaz
- Con ifconfig, podemos habilitar o deshabilitar una interfaz en particular y la forma en que lo hacemos es:
  $ ifconfig eth0 up
- Esto es para abrir una interfaz, para deshabilitar una interfaz el comando es:
  $ ifconfig eth0 down
* ifconfig
- Para asignar una dirección IP a la interfaz mediante ifconfig, el comando:
  $ ifconfig eth0 192.168.5.45
- A continuación asignaremos la máscara de red para la dirección IP asignada y el comando para hacerlo es:
  $ ifconfig netmask 255.255.240.0
- Por último, para asignar una dirección de difusión, el comando es:
  $ ifconfig broadcast 192.168.5.255
- Para asignar una puerta de enlace, ejecuta el siguiente comando:
  $ route add default gw 192.168.5.10
- Y para agregar DNS, ejecutar:
  $ echo “nameserver 8.8.8.8” > /etc/resolv.conf

* Ejemplo del uso de ifconfig y awk
  #! /bin/bash
  ip=$(ip a s wlp7s0 2>/dev/null | awk '/inet / {print $2}')
  echo ip:$ip
* comando df
- Es un comando estandar de Unix, usado para desplegar la cantidad de espacio libre o disponible en los sistemas de archivos a los que el usuario que lo invoca tiene permisos de lectura.
- Las posibles opciones para mostrar el tamaño son:

  $ df -h    # formato humano 
  $ df -m    # formato en megabytes
  $ df -k    # formato en blockes de 1 kilobye, este es el default

* Ejemplo de df

  #! /bin/bash
  d=$(df -h | grep /$ | awk {'print $2'})
  echo espacio de disco: $d

* Que es Cron
-El nombre cron viene del griego chronos que significa “tiempo”. En el sistema operativo Unix, cron es un administrador regular de procesos en segundo plano (demonio) que ejecuta procesos o guiones a intervalos regulares (por ejemplo, cada minuto, día, semana o mes). Los procesos que deben ejecutarse y la hora en la que deben hacerlo se especifican en el fichero crontab.

* Cómo funciona
- El demonio cron inicia de /etc/rc.d/ o /etc/init.d dependiendo de la distribucion. Cron se ejecuta en el background, revisa cada minuto la tabla de tareas crontab /etc/crontab o en /var/spool/cron en búsqueda de tareas que se deban cumplir. Como usuario podemos agregar comandos o scripts con tareas a cron para automatizar algunos procesos. Esto es util por ejemplo para automatizar la actualizacion de un sistema o un buen sistema de respaldos
* Que es Crontab
- Crontab es un simple archivo de texto que guarda una lista de comandos a ejecutar en un tiempo especificado por el usuario. Crontab verificará la fecha y hora en que se debe ejecutar el script o el comando, los permisos de ejecución y lo realizará en el background.
- Para ver el contenido de nuestra programación de tareas ejecutaremos la orden,
  crontab -l
- si lo que queremos ver son las de administrador, ejecutaremos
  sudo crontab -l
- Mientras que para editar nuestra tabla de programación de tareas ejecutaremos la orden,
  crontab -e

* Crontab
- De esta manera tenemos una idea clara de donde tiene que ir cada cosa…
  ##########################################################
  #minuto (0-59),                                          #
  #|  hora (0-23),                                         #
  #|  |  día del mes (1-31),                               #
  #|  |  |  mes (1-12),                                    #
  #|  |  |  |  día de la semana (0-6 donde 0=Domingo)      #
  #|  |  |  |  |       comandos                            #
  ##########################################################
- m corresponde al minuto en que se va a ejecutar el script, el valor va de 0 a 59
- h la hora exacta, se maneja el formato de 24 horas, los valores van de 0 a 23, siendo 0 las 12:00 de la medianoche.
- dia hace referencia al día del mes, por ejemplo se puede especificar 15 si se quiere ejecutar cada dia 15
- mes (1-12)
- día de la semana, puede ser numérico (0 a 7, donde 0 y 7 son domingo) o las 3 primeras letras del día en inglés: mon, tue, wed, thu, fri, sat, sun.
- user define el usuario que va a ejecutar el comando, puede ser root, u otro usuario diferente siempre y cuando tenga permisos de ejecución del script.
- command refiere al comando o a la ruta absoluta del script a ejecutar, ejemplo: /home/usuario/scripts/actualizar.sh, si acaso llama a un script este debe ser ejecutable

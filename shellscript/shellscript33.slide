Shellscript
Introducción a Shell Script

Jose Luis Cordero Llanos
Developer
korderao@gmail.com
@korderao
http://itgroup.systems


* /dev/null

- A efectos prácticos imagínate un cubo de basura, un pozo sin fondo o el espacio sideral al que lanzar cualquier cosa sin posibilidad de recuperarla
- Pero si ya tengo comandos como rm, ¿para qué quiero otra cosa nueva que borre?
- ¿cómo harías para anular en tiempo de ejecución la salida estándar de un error en un comando dentro de un script para la shell? Aquí es donde entra /dev/null.
  usuario@laptop:~$ cat pruebas
  cat: pruebas: No existe el fichero o el directorio
  usuario@laptop:~$ cat pruebas 2>/dev/null
  usuario@laptop:~$
* Ejemplo del uso de /dev/null
  
  #!/bin/bash 
  if ping -c1 google.com &>/dev/null 
  then 
  	conec='OK'
  else 
  	conec='null'
  fi
  echo $conec
 
* comando awk

 awk [condicion] { comandos }

    $0 → Mostrar la línea completa
    $1-$N → Mostrar los campos (columnas) de la línea especificados.
    FS → Field Separator (Espacio o TAB por defecto)
    NF → Número de campos (fields) en la línea actual
    NR → Número de líneas (records) en el stream/fichero a procesar.
- ejemplo
    ls -l | awk {'print $3'}
 

* Comando free
- El comando Free en Linux muestra la cantidad de memoria libre y usada que tiene el sistema. Por una parte muestra la memoria física y por otra la swap, también muestra la memoria caché y de buffer consumida por el Kernel.
- Ejemplo  
  $ free
* Ejemplo del uso de free, grep y awk
  #! /bin/bash
  ram=$(free | grep 'Mem:' | awk {'print $2'})
  echo ram: $ram

* ifconfig(debian) o ip addr show (centos) (ip a s)
- Podríamos tener una serie de interfaces de red con nombres como ‘eth0’, ‘eth1’, ‘wlan0’, etc. Por lo tanto, si queremos ver la información relativa a una interfaz de red en particular:
  $ ifconfig eth0
- Activación o desactivación de una interfaz
- Con ifconfig, podemos habilitar o deshabilitar una interfaz en particular y la forma en que lo hacemos es:
  $ ifconfig eth0 up
- Esto es para abrir una interfaz, para deshabilitar una interfaz el comando es:
  $ ifconfig eth0 down

* Ejemplo del uso de ifconfig y awk
  #! /bin/bash
  ip=$(ip a s wlp7s0 2>/dev/null | awk '/inet / {print $2}')
  echo ip:$ip
* comando df
- Es un comando estandar de Unix, usado para desplegar la cantidad de espacio libre o disponible en los sistemas de archivos a los que el usuario que lo invoca tiene permisos de lectura.
  Las posibles opciones para mostrar el tamaño son:
- opciones  
  $ df -h    # formato humano 
  $ df -m    # formato en megabytes
  $ df -k    # formato en blockes de 1 kilobye, este es el default

* Sha Bang (#!)

- Se denomina “sha-bang” a la secuencia #! con la que se inician los scripts.
- Su función es indicarle al sistema que se trata de un conjunto de comandos para que sean Interpretados.
- A continuación de estos caracteres se indica la ruta completa al intérprete de las órdenes
- 

* She Bang (#!)

- En la primera línea del script se debe indicar que shell que vas a usar.
 ( /bin/bash/ , /usr/bin/perl , etc )

.code scripts/shabang.sh

* Comentarios

- Para introducir comentarios se debe poner #.
- Es importante añadir comentarios describiendo la utilidad del script o las variables que se crean.

.code scripts/comentario.sh

* Definición de Variables

- Al igual que cualquier otro lenguaje de programación, los programas escritos en bash shell o Shell script pueden usar variables.
- No tienen tipo.
- Se definen: 
  VARIABLE="Valor"
- Para utilizar su contenido se antepone un signo *$*:
  $VARIABLE
- Existen dos tipos de variables.
- Variables del sistema: Están creadas y predefinidas por el sistema, normalmente se representan en mayúsculas.
- Variables del usuario: Son definidas por el usuario, normalmente se representan en minúsculas.

* Ejemplos

.code scripts/variables.sh

* Reglas para definir variables.

- No poner espacios
 N=10
- Las variables son sencibles a las mayúsculas, N y n son variables diferentes.
- Se pueden definir variables con valor *NULL*
 vech=
 vech=""
- No usar caracteres extraños como ¡,?,* etc, en los nombres de las variables.

* Ejemplo

.play -edit scripts/variablesdef.sh

* Aritmética en shell script
- El formato para realizar una expansión aritmética es el siguiente: $((expresión)) 
- Podemos realizar las operaciones mediante uso de:
  let c=$a+$b
  c='expr $a + $b'
  c=$((a+b))  # bash y ksh

* Recibir Argumentos

- Shell script al ser interactivo puede recibir argumentos al momento de su ejecución.
 
.image image/argumentos.png _ 690
.code scripts/argumentos.sh
 
* Estructuras condicionales if .. then
 
  #!/bin/bash
  ...
  if [ !$# ]; then
    echo “Hay parametros”
  fi
  ...
  
* Condicional if .. then .. else
 
  #!/bin/bash
  ...
  if [ $(whoami) = root ]; then
    return 0
  else
    return 1
  fi
  ...
  
* Condicional if .. then .. elif
 
  #!/bin/bash
  ...
  if [ $USER = root ]; then
     echo “El usuario es root”
  elif [ $(whoami) = korderao ]; then
     echo “El usuario es korderao”
  else
     echo “Usuario desconocido?”
  fi
  ...
  
* Ejemplo con argumentos

.code scripts/condicionalargumentos.sh

* Ciclos: for, while y until

- El *for* es distinto a los de otros lenguajes de programación. Básicamente, le permite iterar sobre una serie de 'palabras' contenidas dentro de una cadena.
- El *while* ejecuta un trozo de código si la expresión de control es verdadera, y termina cuando es falsa (o se encuentra una interrupción explícita dentro del código en ejecución).
- El *until* es casi idéntico al while, excepto en que el código se ejecuta mientras la expresión de control se evalúe como falsa.

* Ejemplo de for...

  #!/bin/bash
  for i in $( ls ); do
    echo item: $i
  done

* Ejemplo de while...

  #!/bin/bash
  CONTADOR=0
  while [ $CONTADOR -lt 10 ]; do
    echo El contador es $CONTADOR
    let CONTADOR=CONTADOR+1
  done
  
* Ejemplo de until...
 
  #!/bin/bash
  CONTADOR=20
  until [ $CONTADOR -lt 10 ]; do
    echo CONTADOR $CONTADOR
    let CONTADOR-=1
  done
  
* La instrucción case...
 
  case $USER; in
    root)
       echo "Usuario es root";;
    academy)
       echo "Usuario es Academy";;
    *)
echo "Y este quien es?";;
esac
